NAME = libft.a  # name of the output file
CC = cc  # compile with cc
CCFLAGS = -Wall -Werror -Wextra  # compiler flags; -Wall enables all warnings, -Werror turns warnings into errors, and -Wextra adds additional warnings
RM = rm -f  # command to remove files; rm == remove, f == force (without asking)
LIBC = ar rc  # command to create the archive library

SRCS = \  # list of source files
ft_atoi.c \
ft_bzero.c \
ft_isalnum.c \
ft_isalpha.c \
ft_isascii.c \
ft_isdigit.c \
ft_isprint.c \
ft_memcpy.c \
ft_memmove.c \
ft_memset.c \
ft_strlcat.c \
ft_strlcpy.c \
ft_strlen.c \
ft_strncmp.c \
ft_strchr.c \
ft_strrchr.c \
ft_memchr.c \
ft_memcmp.c \
ft_strnstr.c \
ft_calloc.c \
ft_strdup.c \
ft_substr.c \
ft_strjoin.c \
ft_strtrim.c \
ft_split.c \
ft_itoa.c \
ft_strmapi.c \
ft_striteri.c \
ft_putchar_fd.c \
ft_putstr_fd.c \
ft_putendl_fd.c \
ft_putnbr_fd.c \
ft_tolower.c \
ft_toupper.c \

OBJS = ${SRCS:.c=.o}  # list of object files generated from the compilation of source files (each .c file is converted to an .o file)

all: ${NAME}  # default target to build the library

${NAME}: ${OBJS}  # target to build the library from object files
	${LIBC} ${NAME} ${OBJS}

%.o: %.c  # pattern rule to compile .c files into .o files  # compile each .c file into a .o file using the specified compiler and flags
	${CC} ${CCFLAGS} -c $< -o $@

clean:  # target to remove object files (remove .o files)
	${RM} ${OBJS}

fclean: clean  # target to remove object files and the library (remove .o files + libft.a)
	${RM} ${NAME}

re: fclean all  # target to rebuild the entire project (completely cleans the project and recompiles it)


# how does this work?
# 1. starts with: all: ${NAME}
# 2. ${NAME} depends on ${OBJS}
# 3. uses the pattern rule to create the object files *.o from the source file *.c. (OBJS = ${SRCS:.c=.o})
# 4. runs the compiler command to create *.o (%.o: %.c ${CC} ${CCFLAGS} -c $< -o $@)
# 5. runs the ar rc command to create the archive library libft.a from the object file *.o (ar rc libft.a *.o)


# target == what i want to do; the name of a rule in the Makefile; examples: clean or all
# command == how to do it; the action or series of actions that are executed to achieve the target; example:
#	target: clean, no dependencies
#	clean:
#		rm -f myprogram myprogram.o main.o  # command to remove the executable and object files
# dependency is a file or a target that must be up-to-date before the target itself can be built, listed after the colon in a rule
